// Generated by gencpp from file lab1/Gps_data.msg
// DO NOT EDIT!


#ifndef LAB1_MESSAGE_GPS_DATA_H
#define LAB1_MESSAGE_GPS_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lab1
{
template <class ContainerAllocator>
struct Gps_data_
{
  typedef Gps_data_<ContainerAllocator> Type;

  Gps_data_()
    : header()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_easting(0.0)
    , utm_northing(0.0)
    , zone(0)
    , letter()  {
    }
  Gps_data_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_easting(0.0)
    , utm_northing(0.0)
    , zone(0)
    , letter(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _utm_easting_type;
  _utm_easting_type utm_easting;

   typedef double _utm_northing_type;
  _utm_northing_type utm_northing;

   typedef int64_t _zone_type;
  _zone_type zone;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _letter_type;
  _letter_type letter;





  typedef boost::shared_ptr< ::lab1::Gps_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab1::Gps_data_<ContainerAllocator> const> ConstPtr;

}; // struct Gps_data_

typedef ::lab1::Gps_data_<std::allocator<void> > Gps_data;

typedef boost::shared_ptr< ::lab1::Gps_data > Gps_dataPtr;
typedef boost::shared_ptr< ::lab1::Gps_data const> Gps_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab1::Gps_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab1::Gps_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lab1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'lab1': ['/home/jtyler/catkin_ws/src/lab1/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lab1::Gps_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab1::Gps_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab1::Gps_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab1::Gps_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab1::Gps_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab1::Gps_data_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab1::Gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51d4fcc0cdd0af9f1dda0d1d381f876e";
  }

  static const char* value(const ::lab1::Gps_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51d4fcc0cdd0af9fULL;
  static const uint64_t static_value2 = 0x1dda0d1d381f876eULL;
};

template<class ContainerAllocator>
struct DataType< ::lab1::Gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab1/Gps_data";
  }

  static const char* value(const ::lab1::Gps_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab1::Gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"float64 utm_easting\n"
"float64 utm_northing\n"
"int64 zone\n"
"string letter\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lab1::Gps_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab1::Gps_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.utm_easting);
      stream.next(m.utm_northing);
      stream.next(m.zone);
      stream.next(m.letter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gps_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab1::Gps_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab1::Gps_data_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "utm_easting: ";
    Printer<double>::stream(s, indent + "  ", v.utm_easting);
    s << indent << "utm_northing: ";
    Printer<double>::stream(s, indent + "  ", v.utm_northing);
    s << indent << "zone: ";
    Printer<int64_t>::stream(s, indent + "  ", v.zone);
    s << indent << "letter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.letter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB1_MESSAGE_GPS_DATA_H
